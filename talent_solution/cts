#!/usr/bin/env python
from google.cloud import talent_v4beta1
import os
import sys
import logging
import src.tenant
import src.db
import argparse

#General logging config
log_level = os.environ.get('LOG_LEVEL','DEBUG')
logger = logging.getLogger(__name__)
logger.setLevel(log_level)
logger_format = logging.Formatter('%(asctime)s %(filename)s:%(lineno)s %(levelname)-8s %(message)s','%Y-%m-%d %H:%M',)

#Console Logging
console_logger = logging.StreamHandler()
console_logger.setLevel(log_level)
console_logger.setFormatter(logger_format)
logger.addHandler(console_logger)

class cts_cli(object):

    def __init__(self):
        #Parse the command

        main_parser = argparse.ArgumentParser(description="Cloud Talent Solution Command Line tool")

        subparsers_main = main_parser.add_subparsers(dest="entity",help="CTS entities.")
        parser_tenant = subparsers_main.add_parser("tenant",help="Perform operations on a CTS tenant object.")
        parser_company = subparsers_main.add_parser("company",help="Perform operations on a CTS company object.")
        parser_job = subparsers_main.add_parser("job",help="Perform operations on a CTS job object.")

        subparsers_tenant = parser_tenant.add_subparsers(dest="operation",help="Tenant operations.")
        parser_tenant_create = subparsers_tenant.add_parser("create",help="Create a CTS tenant.")
        parser_tenant_create.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_create.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_delete = subparsers_tenant.add_parser("delete",help="Delete a CTS tenant.")
        parser_tenant_delete.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_delete.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_show = subparsers_tenant.add_parser("show",help="Show details of a CTS tenant.")
        parser_tenant_show.add_argument("--project_id",help="Project id of the CTS instance.")
        parser_tenant_show.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_list = subparsers_tenant.add_parser("list",help="List all CTS tenants in a project.")
        parser_tenant_list.add_argument("--project_id",help="Project id of the CTS instance.",required=True)

        # Company Parser
        subparsers_company = parser_company.add_subparsers(dest="operation",help="Company operations.")
        parser_tenant_create = subparsers_company.add_parser("create",help="Create a CTS company.")
        parser_tenant_create.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_create.add_argument("--external_id",help="Unique human-friendly, external name of the company.",required=True)

        parser_tenant_delete = subparsers_company.add_parser("delete",help="Delete a CTS company.")
        parser_tenant_delete.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_delete.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_show = subparsers_company.add_parser("show",help="Show details of a CTS company.")
        parser_tenant_show.add_argument("--project_id",help="Project id of the CTS instance.")
        parser_tenant_show.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_list = subparsers_company.add_parser("list",help="List all CTS companies in a tenant.")
        parser_tenant_list.add_argument("--project_id",help="Project id of the CTS instance.",required=True)

        args = main_parser.parse_args()
        getattr(self,args.entity)(args)

    def tenant(self,args):
        try:
            # main_dir = os.path.dirname(__file__)
            # credential_file = os.path.join(main_dir,'res/secrets/pe-cts-poc-0bbb0b044fea.json')
            # tenant_client = talent_v4beta1.TenantServiceClient.from_service_account_file(credential_file)
            tenant = src.tenant.Tenant()
        except Exception as e:
            logging.exception(e)
        
        if args.operation == 'create':
            new_tenant = tenant.create_tenant(args.external_id,args.project_id)
        elif args.operation == 'delete':
            tenant.delete_tenant(args.external_id,args.project_id)
        elif args.operation == 'show':
            existing_tenant = tenant.get_tenant_by_external_id(args.external_id,args.project_id)
            print ("\n{}".format(existing_tenant)) if existing_tenant is not None else print("Tenant {} not found.".format(args.external_id))
        elif args.operation == 'list':
            tenants = tenant.get_all_tenants(args.project_id)
            if len(tenants) == 0:
                print ("No tenants found in project {}.".format(args.project_id))
            else:
                for tenant in tenants:
                    print (tenant)

if __name__ == '__main__':
    cts_cli()
else:
    print ("This wrapper script is not to be imported. This should be run as a command line.")
    exit(1)