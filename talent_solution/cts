#!/usr/bin/env python
from google.cloud import talent_v4beta1
import os
import sys
import logging
import src.tenant
import src.db
import argparse

#General logging config
log_level = os.environ.get('LOG_LEVEL','INFO')
logger = logging.getLogger(__name__)
logger.setLevel(log_level)
logger_format = logging.Formatter('%(asctime)s %(filename)s:%(lineno)s %(levelname)-8s %(message)s','%Y-%m-%d %H:%M',)

#Console Logging
console_logger = logging.StreamHandler()
console_logger.setLevel(log_level)
console_logger.setFormatter(logger_format)
logger.addHandler(console_logger)

class cts_cli(object):

    def __init__(self):
        #Parse the command

        main_parser = argparse.ArgumentParser(description="Cloud Talent Solution Command Line tool")

        subparsers_main = main_parser.add_subparsers(dest="entity",help="CTS entities.")
        parser_tenant = subparsers_main.add_parser("tenant",help="Perform operations on a CTS tenant object.")
        parser_company = subparsers_main.add_parser("company",help="Perform operations on a CTS company object.")
        parser_job = subparsers_main.add_parser("job",help="Perform operations on a CTS job object.")

        subparsers_tenant = parser_tenant.add_subparsers(dest="operation",help="Tenant operations.")
        parser_tenant_create = subparsers_tenant.add_parser("create",help="Create a CTS tenant.")
        parser_tenant_create.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_create.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_delete = subparsers_tenant.add_parser("delete",help="Delete a CTS tenant.")
        parser_tenant_delete.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_delete.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_show = subparsers_tenant.add_parser("show",help="Show details of a CTS tenant.")
        parser_tenant_show.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_show.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_list = subparsers_tenant.add_parser("list",help="List all CTS tenants in a project.")
        parser_tenant_list.add_argument("--project_id",help="Project id of the CTS instance.",required=True)

        # Company Parser
        subparsers_company = parser_company.add_subparsers(dest="operation",help="Company operations.")
        parser_tenant_create = subparsers_company.add_parser("create",help="Create a CTS company.")
        parser_tenant_create.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_create.add_argument("--external_id",help="Unique human-friendly, external name of the company.",required=True)

        parser_tenant_delete = subparsers_company.add_parser("delete",help="Delete a CTS company.")
        parser_tenant_delete.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_delete.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_show = subparsers_company.add_parser("show",help="Show details of a CTS company.")
        parser_tenant_show.add_argument("--project_id",help="Project id of the CTS instance.",required=True)
        parser_tenant_show.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)

        parser_tenant_list = subparsers_company.add_parser("list",help="List all CTS companies in a tenant.")
        parser_tenant_list.add_argument("--project_id",help="Project id of the CTS instance.",required=True)

        args = main_parser.parse_args()
        getattr(self,args.entity)(args)


     
    class tenant:
        def __init__(self,args):
            try:
                main_dir = os.path.dirname(__file__)
                credential_file = os.path.join(main_dir,'res/secrets/pe-cts-poc-0bbb0b044fea.json')
                tenant_client = talent_v4beta1.TenantServiceClient.from_service_account_file(credential_file)
                db_connection = src.db.cts_db().connection()

                op = getattr(args,'operation')
                getattr(self,op)(tenant_client,db_connection,args)
            except Exception as e:
                logging.exception(e)
                        
        def create(self,tenant_client,db_connection,args):
            new_tenant = src.tenant.create_tenant(tenant_client,db_connection,args.project_id,args.external_id)

        def delete(self,tenant_client,args):
            src.tenant.delete_tenant(tenant_client,args.project_id,args.external_id)

        def show(self,tenant_client,args):
            tenant = src.tenant.get_tenant_by_name(tenant_client,args.project_id,args.external_id)
            print ("\n{}".format(tenant)) if tenant is not None else print("Tenant {} not found.".format(tenant_external_id))

        def list(self,tenant_client,db_connection,args):
            tenants = src.tenant.get_all_tenants(tenant_client,db_connection,args.project_id)
            tenant_list = list(tenant for tenant in tenants)
            if len(tenant_list) == 0:
                print ("No tenants found in project {}.".format(args.project_id))
            else:
                for tenant in tenant_list:
                    print (tenant)

    class company:
        def __init__(self,args):
            try:
                main_dir = os.path.dirname(__file__)
                credential_file = os.path.join(main_dir,'res/secrets/pe-cts-poc-0bbb0b044fea.json')
                tenant_client = talent_v4beta1.TenantServiceClient.from_service_account_file(credential_file)
                op = getattr(args,'operation')
                getattr(self,op)(tenant_client,args)
            except Exception as e:
                logging.exception(e)
                        
        def create(self,company_client,args):
            new_company = src.company.create_company(company_client,args.project_id,args.external_id)

        def delete(self,company_client,args):
            src.company.delete_company(company_client,args.project_id,args.external_id)

        def show(self,company_client,args):
            company = src.company.get_company_by_name(company_client,args.project_id,args.external_id)
            print ("\n{}".format(company)) if company is not None else print("company {} not found.".format(company_external_id))

        def list(self,company_client,args):
            companies = src.company.get_all_companys(company_client,args.project_id)
            company_list = list(company for company in companies)
            if len(company_list) == 0:
                print ("No companies found in project {}.".format(args.project_id))
            else:
                for company in company_list:
                    print (company)



if __name__ == '__main__':
    cts_cli()
else:
    print ("This wrapper script is not to be imported. This should be run as a command line.")
    exit(1)