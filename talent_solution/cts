#!/usr/bin/env python3
from google.cloud import talent_v4beta1
import os
import sys
import logging
import argparse

from google.protobuf import json_format
from conf import config
from json import loads as json_loads
from modules import cts_tenant,cts_company,cts_job

#General logging config
log_level = config.LOGGING['log_level'] if config.LOGGING['log_level'] is not None else 'INFO'
logger = logging.getLogger()
logger.setLevel(log_level)
logger_format = logging.Formatter(config.LOGGING['log_format'],'%Y-%m-%d %H:%M',)

#Console Logging
console_logger = logging.StreamHandler()
console_logger.setLevel(log_level)
console_logger.setFormatter(logger_format)
logger.addHandler(console_logger)

#TODO:Add file logging

logger.debug("Setting log level to {}".format(log_level))

class cts_cli:

    def __init__(self):
        #Parse the command
        #TODO: check and correct the help messages
        main_parser = argparse.ArgumentParser(description="Cloud Talent Solution Command Line tool")

        subparsers_main = main_parser.add_subparsers(dest="entity",help="An entity such as a company, job, profile or application \
            supported by Cloud Talent.")
        subparsers_main.required=True
        parser_tenant = subparsers_main.add_parser("tenant",help="Perform operations on a CTS tenant object.")
        parser_company = subparsers_main.add_parser("company",help="Perform operations on a CTS company object.")
        parser_job = subparsers_main.add_parser("job",help="Perform operations on a CTS job object.")
        # Tenant 
        subparsers_tenant = parser_tenant.add_subparsers(dest="operation",help="Tenant operations.")
        # Tenant Create Parser
        parser_tenant_create = subparsers_tenant.add_parser("create",help="Create a CTS tenant.")
        parser_tenant_create.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_tenant_create.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)
        # Tenant Delete Parser
        parser_tenant_delete = subparsers_tenant.add_parser("delete",help="Delete a CTS tenant.")
        parser_tenant_delete.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_tenant_delete.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)
        parser_tenant_delete.add_argument("--force",help="Force a check on the cloud and delete the tenant. Use this if the client \
            and the cloud are out of sync.",action='store_true')
        # Tenant Show Parser
        parser_tenant_show = subparsers_tenant.add_parser("show",help="Show details of a CTS tenant.")
        parser_tenant_show.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_tenant_show.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.",required=True)
        #Tenant List Parser
        parser_tenant_list = subparsers_tenant.add_parser("list",help="List all CTS tenants in a project.")
        parser_tenant_list.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        # Tenant Sync Parser
        parser_tenant_sync = subparsers_tenant.add_parser("sync",help="Sync details of a CTS tenant or all CTS tenants to the local client.")
        parser_tenant_sync.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_tenant_sync.add_argument("--external_id",help="Unique human-friendly, external name of the tenant.")

        # Company Parser
        subparsers_company = parser_company.add_subparsers(dest="operation",help="Company operations.")
        #Company Create Parser
        parser_company_create = subparsers_company.add_parser("create",help="Create a CTS company.")
        parser_company_create.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_company_create.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant. \
            If not provided, this will be created under default tenant.")
        company_create_mutex_args = parser_company_create.add_mutually_exclusive_group(required=True)
        company_create_mutex_args.add_argument("--company",help="Company object. Mandatory attributes: \
            {\"external_id\":\"<external id>\"}",type=json_loads)
        company_create_mutex_args.add_argument("--file",help="Path to the file to be loaded in batch mode.")
        # Company Delete Parser
        parser_company_delete = subparsers_company.add_parser("delete",help="Delete a CTS company.")
        parser_company_delete.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_company_delete.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant. \
            If not provided, this will be created under default tenant.")
        company_delete_mutex_args = parser_company_delete.add_mutually_exclusive_group(required=True)
        company_delete_mutex_args.add_argument("--external_id",help="Unique human-friendly, external name of the company.")
        company_delete_mutex_args.add_argument("--all",help="Unique human-friendly, external name of the tenant.",action='store_true')
        parser_company_delete.add_argument("--force",help="Force a check on the cloud and delete the tenant. \
            Use this if the client and the cloud are out of sync.",action='store_true')
        # Company Show Parser
        parser_company_show = subparsers_company.add_parser("show",help="Show details of a CTS company.")
        parser_company_show.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_company_show.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant. \
            If not provided, this will be created under default tenant.")
        parser_company_show.add_argument("--external_id",help="Unique human-friendly, external name of the company. Supports multiple company external ids separated by comma.",required=True)
        # Company List Parser
        parser_company_list = subparsers_company.add_parser("list",help="List all CTS companies in a tenant.")
        parser_company_list.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_company_list.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant.")
        # Company Sync Parser
        parser_company_sync = subparsers_company.add_parser("sync",help="Show details of a CTS company.")
        parser_company_sync.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_company_sync.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant. \
            If not provided, this will be created under default tenant.")
        parser_company_sync.add_argument("--external_id",help="Unique human-friendly, external name of the company. Supports multiple company external ids separated by comma.")


        # Job Parser
        subparsers_job = parser_job.add_subparsers(dest="operation",help="Job operations.")
        # Job Create Parser
        parser_job_create = subparsers_job.add_parser("create",help="Create a CTS job.")
        parser_job_create.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_job_create.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant. \
            If not provided, this will be created under default tenant.")
        job_create_mutex_args = parser_job_create.add_mutually_exclusive_group(required=True)
        job_create_mutex_args.add_argument("--job",help="Job object. Mandatory attributes: \
            {\"company\":\"<company_id>\",\"requisition_id\":\"<external id>\",\"title\":\"<title>\",\"description\":\"<description>\",\
                \"language_code\":\"<language_code>\"}",type=json_loads)          
        job_create_mutex_args.add_argument("--file",help="Path to the file to be loaded in batch mode.")

        # Job Delete Parser
        parser_job_delete = subparsers_job.add_parser("delete",help="Delete a CTS job.")
        parser_job_delete.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_job_delete.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant. \
            If not provided, this will be created under default tenant.")
        parser_job_delete.add_argument("--company_id",help="Unique human-friendly, external id of the company.")
        job_delete_mutex_args = parser_job_delete.add_mutually_exclusive_group(required=True)
        job_delete_mutex_args.add_argument("--external_id",help="Unique human-friendly, external name of the job.")
        job_delete_mutex_args.add_argument("--all",help="Unique human-friendly, external name of the tenant.",action='store_true')
        parser_job_delete.add_argument("--language",help="BCP-47 Standard language code of the job, such as “en-US” or “sr-Latn”. \
            If a language code is provided along with the external_id, it will uniquely identify a job listing. Multiple languages \
                can be provided as a comma separated list. Default: App default or 'en-US'.",default=config.APP['default_language'] or 'en-US')
        parser_job_delete.add_argument("--force",help="Force a check on the cloud and delete the tenant. \
            Use this if the client and the cloud are out of sync.",action='store_true')

        # Job Show Parser
        parser_job_show = subparsers_job.add_parser("show",help="Show details of a CTS job.")
        parser_job_show.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_job_show.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant. \
            If not provided, this will be created under default tenant.")
        parser_job_show.add_argument("--company_id",help="Unique human-friendly, external id of the company.",required=True)
        parser_job_show.add_argument("--external_id",help="Requisition ID of the job. If a language code is provided along with \
            this, it will uniquely identify a job listing.",required=True)
        parser_job_show.add_argument("--language",help="BCP-47 Standard language code of the job, such as “en-US” or “sr-Latn”. \
            If a language code is provided along with the external_id, it will uniquely identify a job listing. Multiple languages \
                can be provided as a comma separated list. Default: App default or 'en-US'.",default=config.APP['default_language'] or 'en-US')

        #Job List Parser
        parser_job_list = subparsers_job.add_parser("list",help="List all CTS jobs for a given tenant or the default tenant.")
        parser_job_list.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_job_list.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant.")
        parser_job_list.add_argument("--company_id",help="Unique human-friendly, external id of the company.")
        parser_job_list.add_argument("--status",help="Status of the job listing. Valid values: OPEN, EXPIRED, ALL. \
            Default: OPEN.",choices=['OPEN','EXPIRED','ALL'],default='OPEN')

        #Job Sync Parser
        parser_job_sync = subparsers_job.add_parser("sync",help="Sync all CTS jobs for a given requisition ID, or a company, or a tenant.")
        parser_job_sync.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_job_sync.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant.")
        parser_job_sync.add_argument("--company_id",help="Unique human-friendly, external id of the company. Supports multiple companies as a comma list.")
        parser_job_sync.add_argument("--external_id",help="Requisition ID of the job. If a language code is provided along with \
            this, it will uniquely identify a job listing.")

        # Job Update Parser
        parser_job_update = subparsers_job.add_parser("update",help="Create a CTS job.")
        parser_job_update.add_argument("--project_id",help="Project id of the CTS instance.",default=config.APP['gcp_project'])
        parser_job_update.add_argument("--tenant_id",help="Unique human-friendly, external id of the tenant. \
            If not provided, this will be updated under default tenant.")
        job_update_mutex_args = parser_job_update.add_mutually_exclusive_group(required=True)
        job_update_mutex_args.add_argument("--job",help="Job object. Mandatory attributes: \
            {\"company\":\"<company_id>\",\"requisition_id\":\"<external id>\",\"title\":\"<title>\",\"description\":\"<description>\",\
                \"language_code\":\"<language_code>\"}",type=json_loads)          
        job_update_mutex_args.add_argument("--file",help="Path to the file to be loaded in batch mode.")
        parser_job_update.add_argument("--update_mask",help="Update mask spec: a comma-separated list of fully qualified names of fields of the Job resource. Example: 'posting_expire_time,application_info.uris'.\
            If update_mask is provided, only the specified fields in Job are updated. Otherwise all the fields are updated, which is not recommended. \
                Ref: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4beta1/projects.jobs")
        args = main_parser.parse_args()
        getattr(self,args.entity)(args)

    def tenant(self,args):
        try:
            tenant = cts_tenant.Tenant()        
            if args.operation == 'create':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    new_tenant = tenant.create_tenant(args.project_id,args.external_id)
                    print ("\n{}".format(json_format.MessageToJson(new_tenant))) if new_tenant else exit(1)
            elif args.operation == 'delete':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    tenant.delete_tenant(args.project_id,args.external_id,args.force)
            elif args.operation == 'show':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    existing_tenant = tenant.get_tenant(project_id=args.project_id,external_id=args.external_id)
                    print ("\n{}".format(json_format.MessageToJson(existing_tenant))) if existing_tenant \
                        else print("Tenant {} not found.".format(args.external_id))
            elif args.operation == 'list':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    tenants = tenant.get_tenant(project_id=args.project_id,all=True)
                    if tenants is None or len(tenants) == 0:
                        print ("No tenants found in project {}.".format(args.project_id))
                    else:
                        for tenant in tenants:
                            print (json_format.MessageToJson(tenant))
            elif args.operation == 'sync':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    tenant.sync_tenant(args.project_id,args.external_id)

        except Exception as e:
            logger.error(e,exc_info=config.LOGGING['traceback'])

    def company(self,args):
        try:
            company = cts_company.Company()
            
            if args.operation == 'create':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    new_companies = company.create_company(project_id=args.project_id,tenant_id=args.tenant_id,company=args.company,file=args.file)
                    if new_companies:
                        for c in new_companies:
                            print("\n{}".format(json_format.MessageToJson(c)))
                        print("Total companies created: {}".format(len(new_companies)))
                    else:
                        print("No companies were created.")

            elif args.operation == 'delete':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    company.delete_company(project_id=args.project_id,tenant_id=args.tenant_id,external_id=args.external_id,all=args.all,force=args.force)
            elif args.operation == 'show':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    logger.debug("Showing company(ies): {}".format(args.external_id))
                    existing_companies = company.get_company(project_id=args.project_id,tenant_id=args.tenant_id,external_id=args.external_id)
                    if existing_companies is not None:
                        for id in args.external_id.split(","):
                            if any(existing_company.external_id == id for existing_company in existing_companies):
                                for existing_company in existing_companies:
                                    if existing_company.external_id==id:
                                        print("\n{}".format(json_format.MessageToJson(existing_company)))
                            else:
                                print("\nCompany {} not found.".format(id))
                        print("Total companies returned: {}".format(len(existing_companies)))                      
                    else:
                        print("No companies found: {}".format(args.external_id))
            elif args.operation == 'list':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    companies = company.get_company(project_id=args.project_id,tenant_id=args.tenant_id,all=True)
                    if len(companies) == 0:
                        print ("No companies found in project {}.".format(args.project_id)) if args.tenant_id is None   \
                            else print ("No companies found in project {} and tenant {}.".format(args.project_id,args.tenant_id))
                    else:
                        for company in companies:
                            print("\n{}".format(json_format.MessageToJson(company)))
                        print("Total companies returned: {}".format(len(companies)))
            elif args.operation == 'sync':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    company.sync_company(project_id=args.project_id,tenant_id=args.tenant_id,external_id=args.external_id)

        except Exception as e:
            logging.exception(e)

            
    def job(self,args):
        try:
            job = cts_job.Job()

            if args.operation == 'create':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    new_job = job.create_job(project_id=args.project_id,tenant_id=args.tenant_id,input_job=args.job,\
                        file=args.file)
                    # create_job returns True for successful batch completion and job object for interactive job creation
                    # It will return None in case of an error
                    if new_job and new_job != True:
                            print("\n{}".format(json_format.MessageToJson(new_job)))
                    else:
                        exit(1)
            elif args.operation == 'delete':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    job.delete_job(project_id=args.project_id,company_id=args.company_id,tenant_id=args.tenant_id,\
                        external_id=args.external_id,languages=args.language,all=args.all,force=args.force)
            elif args.operation == 'show':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    existing_job = job.get_job(project_id=args.project_id,tenant_id=args.tenant_id,company_id=args.company_id,external_id=args.external_id,languages=args.language)
                    if existing_job:
                        print ("{}".format(existing_job)) 
                    else:
                        print("Job {} not found.".format(args.external_id))
                        logger.warning("Job {} not found.".format(args.external_id))
            elif args.operation == 'list':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    jobs = job.get_job(project_id=args.project_id,tenant_id=args.tenant_id,company_id=args.company_id,status=args.status,all=True)
                    # if len(jobs) == 0:
                    if not jobs:
                        print ("No jobs found for project {}, {} tenant and {} company.".format(args.project_id,args.tenant_id or 'DEFAULT',args.company_id or 'any')) 
                    else:
                        for job in jobs:
                            print("\n{}".format(json_format.MessageToJson(job)))
                        print("Total jobs returned: {}".format(len(jobs)))
            elif args.operation == 'sync':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    job.sync_job(project_id=args.project_id,company_id=args.company_id,tenant_id=args.tenant_id,\
                        external_id=args.external_id)
            elif args.operation == 'update':
                if args.project_id is None or args.project_id == "":
                    raise ValueError("Misconfigured or missing project ID.") 
                    exit(1)
                else:
                    updated_job = job.update_job(project_id=args.project_id,tenant_id=args.tenant_id,input_job=args.job,\
                        path=args.file,update_mask=args.update_mask)
                    # print(updated_job)
                    # update_job returns True for successful batch completion and the updated job object 
                    # for interactive job creation. It will return False in case of an error
                    if updated_job:
                        if not isinstance(updated_job,bool):
                            print("\n{}".format(json_format.MessageToJson(updated_job)))
                    else:
                        exit(1)
        except Exception as e:
            logging.exception(e)

if __name__ == '__main__':
    cts_cli()
else:
    print ("This wrapper script is not to be imported. This should be run as a command line.")
    exit(1)