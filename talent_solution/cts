#!/usr/bin/env python
from google.cloud import talent_v4beta1
import os
import sys
import logging
import src.tenant
import argparse

#General logging config
log_level = os.environ.get('LOG_LEVEL','INFO')
logger = logging.getLogger(__name__)
logger.setLevel(log_level)
logger_format = logging.Formatter('%(asctime)s %(filename)s:%(lineno)s %(levelname)-8s %(message)s','%Y-%m-%d %H:%M',)

#Console Logging
console_logger = logging.StreamHandler()
console_logger.setLevel(log_level)
console_logger.setFormatter(logger_format)
logger.addHandler(console_logger)



class cts_cli(object):

    def __init__(self):
        #Parse the command
        parser = argparse.ArgumentParser(description="Cloud Talent Solution Command Line tool")
        parser.add_argument("entity",help="CTS entity and operation. Supported entities: tenant, company, job. Valid operations")
        # Parse only the first argument
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self,args.entity):
            print ('Unrecognized Cloud Talent entity.')
            parser.print_help()
            exit(1)
        self.entity = getattr(self,args.entity)()

    class tenant(object):
        def __init__(self):
            parser = argparse.ArgumentParser(description='Perform a tenant operation.')
            #Parse the operation
            parser.add_argument('operation',help='Tenant operation to be performed. Supported operations: create, delete, show and list.')
            required_args = parser.add_argument_group("required arguments")
            required_args.add_argument('--project_id',help='Project ID for the tenant.',required=True)
            parser.add_argument('--tenant_external_id',help='Unique name of the tenant.')
            args = parser.parse_args(sys.argv[2:])
            if not hasattr(self,args.operation):
                print ('Unrecognized operation.')
                parser.print_help()
                exit(1)
            try:
                main_dir = os.path.dirname(__file__)
                credential_file = os.path.join(main_dir,'res/secrets/pe-cts-poc-0bbb0b044fea.json')
                tenant_client = talent_v4beta1.TenantServiceClient.from_service_account_file(credential_file)
            except Exception as e:
                logging.exception(e)
            getattr(self,args.operation)(tenant_client,args.project_id,args.tenant_external_id)
            
        def create(self,tenant_client,project_id,tenant_external_id):
            new_tenant = src.tenant.create_tenant(tenant_client,project_id,tenant_external_id)

        def delete(self,tenant_client,project_id,tenant_external_id):
            src.tenant.delete_tenant(tenant_client,project_id,tenant_external_id)

        def show(self,tenant_client,project_id,tenant_external_id):
            tenant = src.tenant.get_tenant_by_name(tenant_client,project_id,tenant_external_id)
            print ("\n{}".format(tenant)) if tenant is not None else print("Tenant {} not found.".format(tenant_external_id))

        def list(self,tenant_client,project_id,tenant_external_id):
            tenants = src.tenant.get_all_tenants(tenant_client,project_id)
            if any(tenants):
                for tenant in tenants:
                    print (tenant)
            else:
                print ("No tenants found in project {}.".format(project_id))

if __name__ == '__main__':
    cts_cli()
else:
    print ("This wrapper script is not to be imported. This should be run as a command line.")
    exit(1)